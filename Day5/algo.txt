       <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< EASY DIFFICULTY >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
            
            ************* ADD UP THE  FROM A SINGLE NUMBER *************
Create a function that takes a number as an argument. Add up all the numbers from 1 to the number you passed to the function. For example, if the input is 4 then your function should return 10 because 1 + 2 + 3 + 4 = 10.
Examples
addUp(4) ➞ 10
addUp(13) ➞ 91
addUp(600) ➞ 180300
Notes
Expect any positive number between 1 and 1000.
                ************* Which Function Returns the Larger Number *************
Your function will be passed two functions, f and g, that don't take any parameters. Your function has to call them, and return a string which indicates which function returned the larger number.
If f returns the larger number, return the string f.
If g returns the larger number, return the string g.
If the functions return the same number, return the string neither.
Examples
whichIsLarger(() => 5, () => 10) ➞ "g"
whichIsLarger(() => 25,  () => 25) ➞ "neither"
whichIsLarger(() => 505050, () => 5050) ➞ "f"
Notes
This exercise is designed as an introduction to higher order functions (functions which use other functions to do their work).
--------------------------------------------------------------------------------------------------------------------
            <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< MEDIUM DIFFICULTY >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                  
                    ************* Convert objects to arrays *************
Write a function that converts an object into an array, where each element represents a key-value pair in the form of an array.
Examples
toArray({ a: 1, b: 2 }) ➞ [["a", 1], ["b", 2]]
toArray({ shrimp: 15, tots: 12 }) ➞ [["shrimp", 15], ["tots", 12]]
toArray({}) ➞ []
Notes
Return an empty array if the object is empty.
                            ************* Convenience Store *************
Given a total due and an array representing the amount of change in your pocket, determine whether or not you are able to pay for the item. Change will always be represented in the following order: quarters, dimes, nickels, pennies.
To illustrate: changeEnough([25, 20, 5, 0], 4.25) should yield true, since having 25 quarters, 20 dimes, 5 nickels and 0 pennies gives you 6.25 + 2 + .25 + 0 = 8.50.
Examples
changeEnough([2, 100, 0, 0], 14.11) ➞ false
changeEnough([0, 0, 20, 5], 0.75) ➞ true
changeEnough([30, 40, 20, 5], 12.55) ➞ true
changeEnough([10, 0, 0, 50], 3.85) ➞ false
changeEnough([1, 0, 5, 219], 19.99) ➞ false
Notes
quarter: 25 cents / $0.25
dime: 10 cents / $0.10
nickel: 5 cents / $0.05
penny: 1 cent / $0.01
                                    ************* War of Numbers *************
There's a great war between the even and odd numbers. Many numbers already lost their life in this war and it's your task to end this. You have to determine which group is larger: the even, or the odd. The larger group wins.
Create a function that takes an array of integers, sums the even and odd numbers seperately, then returns the larger of the sums minus the smaller.
Examples
warOfNumbers([2, 8, 7, 5]) ➞ 2
// 2 + 8 = 10
// 7 + 5 = 12
// 12 is larger than 10
// So we return 12 - 10 = 2
warOfNumbers([12, 90, 75]) ➞ 27
warOfNumbers([5, 9, 45, 6, 2, 7, 34, 8, 6, 90, 5, 243]) ➞ 168
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< HARD DIFFICULTY >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  
                        ************* Oddish vs. Evenish *************
Create a function that determines whether a number is Oddish or Evenish. A number is Oddish if the sum of all of its digits is odd, and a number is Evenish if the sum of all of its digits is even. If a number is Oddish, return "Oddish". Otherwise, return "Evenish".
For example, oddishOrEvenish(121) should return "Evenish", since 1 + 2 + 1 = 4. oddishOrEvenish(41) should return "Oddish", since 4 + 1 = 5.
Examples
oddishOrEvenish(43) ➞ "Oddish"
oddishOrEvenish(373) ➞ "Oddish"
oddishOrEvenish(4433) ➞ "Evenish"
        <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<< VERY HARD DIFFICULTY >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                             ************* Fibonacci String *************
A Fibonacci string is a precedence of the Fibonacci series. It works with any two characters of the English alphabet (as opposed to the numbers 0 and 1 in the Fibonacci series) as the initial items and concatenates them together as it progresses similarly to the Fibonacci series.
Examples
fibStr(3, ["j", "h"]) ➞ "j, h, hj"
fibStr(5, ["e", "a"]) ➞ "e, a, ae, aea, aeaae"
fibStr(6, ["n", "k"]) ➞ "n, k, kn, knk, knkkn, knkknknk"
Notes
All values for n will be at least 2.
A recursive version of this challenge can be found here.


************* altSemifactorial *************
The factorial of a positive number n is the product of all numbers from 1 to n.
5! = 5 x 4 x 3 x 2 x 1 = 120
The semifactorial (also known as the double factorial) of a positive number n is the product of all numbers from 1 to n that have the same parity (i.e. odd or even) as n.
12!! = 12 x 10 x 8 x 6 x 4 x 2 = 46,080
7!! = 7 x 5 x 3 x 1 = 105
The alternating factorial of a positive number n is the sum of the consecutive factorials from n to 1, where every other factorial is multiplied by -1.
Alternating factorial of 1:
af(1) = 1!
Alternating factorial of 2:
af(2) = 2! + (-1)x(1!) = 2! - 1! = 2 -1 = 1
Alternating factorial of 3:
af(3) = 3! - 2! + 1! = 6 - 2 + 1 = 5
Create a function that takes a number n and returns the difference between the alternating factorial and semifactorial of n.
Examples
altSemi(1) ➞ 0
altSemi(2) ➞ -1
altSemi(3)➞ 2

